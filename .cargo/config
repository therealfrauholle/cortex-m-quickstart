[target.'cfg(all(target_arch = "arm", target_os = "none"))']
# runner = 'arm-none-eabi-gdb -x debug.gdb'
rustflags = [
  # LLD (shipped with the Rust toolchain) is used as the default linker
  "-C", "link-arg=-Tlink.x",

  # if you run into problems with LLD switch to the GNU linker by commenting out
  # this line
  # "-C", "linker=arm-none-eabi-ld",

  # if you need to link to pre-compiled C libraries provided by a C toolchain
  # use GCC as the linker by commenting out both lines above and then
  # uncommenting the three lines below
  # "-C", "linker=arm-none-eabi-gcc",
  # "-C", "link-arg=-Wl,-Tlink.x",
  # "-C", "link-arg=-nostartfiles",
]

# work around rust-lang/cargo#5946
[target.thumbv6m-none-eabi]
runner = 'arm-none-eabi-gdb -x debug.gdb'

[target.thumbv7m-none-eabi]
runner = 'arm-none-eabi-gdb -x debug.gdb'

[target.thumbv7em-none-eabi]
runner = 'arm-none-eabi-gdb -x debug.gdb'

[target.thumbv7em-none-eabihf]
runner = 'arm-none-eabi-gdb -x debug.gdb'
# end of workaround

[build]
# Pick one of these compilation targets
# target = "thumbv6m-none-eabi"
# target = "thumbv7m-none-eabi"
# target = "thumbv7em-none-eabi"
# target = "thumbv7em-none-eabihf"